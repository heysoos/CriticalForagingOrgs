#!/usr/bin/env python

from embodied_ising import ising
import numpy as np
from sys import argv
from os import path, makedirs

import pickle

loadfile = 'sim-20180516-012056'
iterNum = '269'

# --- COMPUTE HEAT CAPACITY -------------------------------------------------------+

# if len(argv) < 2:
#     print("Usage: " + argv[0] + " <size> + <bind>")
#     exit(1)
#
# bind = int(argv[1])

startstr = 'Loading simulation:' + loadfile
print(startstr)

for bind in range(101):

    R = 5
    mode = 'MonteCarlo'

    Nbetas = 101
    betas = 10 ** np.linspace(-1, 1, Nbetas)

    filename = 'save/' + loadfile + '/isings/gen[' + iterNum + ']-isings.pickle'

    bindstr = 'BInd: ' + str(bind)
    print(bindstr)

    isings = pickle.load(open(filename, 'rb'))
    size = isings[0].size # get size from first agent
    numAgents = len(isings)

    C = np.zeros((R, numAgents))



    for rep in range(R):
        # filename = 'files/mode_' + mode + '-size_' + \
        #            str(size) + '-ind_' + str(rep) + '.npz'
        # filename = 'parameters.npz'
        # data = np.load(filename)
        # I = ising(size)
        # I.h = data['h'][()][(size, rep)]
        # I.J = data['J'][()][(size, rep)]

        agentNum = 0

        for I in isings:
            Em = 0
            E2m = 0
            T = 1000

            # print(agentNum)
            betaVec = betas * I.Beta
            I.Beta = betaVec[bind]
            I.randomize_state()
            for t in range(int(T / 10)):
                I.DreamSensorGlauberStep()

            for t in range(T):
                I.DreamSensorGlauberStep()
                E = -(np.dot(I.s, I.h) + np.dot(np.dot(I.s, I.J), I.s))
                Em += E / float(T)
                E2m += E ** 2 / float(T)
            C[rep, agentNum] = I.Beta ** 2 * (E2m - Em ** 2) / size
            agentNum += 1

    # print(np.mean(C, 0))
    folder = 'save/' + loadfile + '/C/C_' + str(iterNum) + '/'
    file = 'C-size_' + str(size) + '-Nbetas_' + \
           str(Nbetas) + '-bind_' + str(bind) + '.npy'
    filename = folder + file

    if not path.exists(folder):
        makedirs(folder)

    np.save(filename, C)
    savestr = 'Saving: ./.../' + file
    print(savestr)
