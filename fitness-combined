#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
from matplotlib.lines import Line2D
from matplotlib.patches import Circle
import pickle
from os import makedirs, path

loadfiles = ['beta_experiment/beta-0-1/sim-20180512-105719',
             'beta_experiment/beta-1/sim-20180511-163319',
             'beta_experiment/beta-10/sim-20180512-105824']

numAgents = 50
autoLoad = True
saveFigBool = True
fixGen2000 = False

# loadfiles = ['beta_experiment/beta-0-1/sim-20180512-105719',
#              'beta_experiment/beta-0-1/sim-20180512-105725',
#              'beta_experiment/beta-1/sim-20180511-163319',
#              'beta_experiment/beta-1/sim-20180511-163335',
#              'beta_experiment/beta-1/sim-20180511-163347',
#              'beta_experiment/beta-1/sim-20180511-163357',
#              'beta_experiment/beta-10/sim-20180512-105824',
#              'beta_experiment/beta-10/sim-20180512-105819']

# IC = [0, 0, 1, 1, 1, 1, 2, 2]
new_order = [2, 0, 1]

labels = [r'$\beta_i = 0.1$', r'$\beta_i = 1$', r'$\_i = 10$']
iter_list = np.arange(0, 4000, 1)
cmap = plt.get_cmap('seismic')
norm = colors.Normalize(vmin=0, vmax=len(loadfiles))  # age/color mapping
# norm = [[194, 48, 32, 255],
#         [146, 49, 182, 255],
#         [44, 112, 147, 255]
#         ]
# norm = np.divide(norm, 255)
a = 0.15 # alpha

def upper_tri_masking(A):
    m = A.shape[0]
    r = np.arange(m)
    mask = r[:, None] < r
    return A[mask]

def fitness(loadfile, iter_list, numAgents, autoLoad, saveFigBool):

    folder = 'save/' + loadfile

    folder2 = folder + '/figs/fitness/'
    fname2 = folder2 + 'fitness-' + \
             str(iter_list[0]) + '-' + str(iter_list[1] - iter_list[0]) + '-' + str(iter_list[-1]) + \
             '.npz'

    if path.isfile(fname2) and autoLoad:
        txt = 'Loading: ' + fname2
        print(txt)
        data = np.load(fname2)
        FOOD = data['FOOD']
    else:
        FOOD = np.zeros((len(iter_list), numAgents))
        for ii, iter in enumerate(iter_list):
            filename = 'save/' + loadfile + '/isings/gen[' + str(iter) + ']-isings.pickle'

            startstr = 'Loading simulation:' + filename
            print(startstr)

            isings = pickle.load(open(filename, 'rb'))

            food = []
            for i, I in enumerate(isings):
                food.append(I.fitness)
            # food = np.divide(food, 6)
            FOOD[ii, :] = food

        if not path.exists(folder2):
            makedirs(folder2)

        np.savez(fname2, FOOD=FOOD)
    return FOOD

FOODS = []
for loadfile in loadfiles:
    f = fitness(loadfile, iter_list, numAgents, autoLoad, saveFigBool)
    # FIX THE DOUBLE COUNTING PROBLEM
    if f.shape[0] > 2000 and fixGen2000:
        print('Fixing Double Counting at Gen 2000')
        f[2000, :] = f[2000, :] - f[1999, :]
    FOODS.append(f)

# FIX THE DOUBLE COUNTING OF THE FITNESS


plt.rc('text', usetex=True)
font = {'family': 'serif', 'size': 28, 'serif': ['computer modern roman']}
plt.rc('font', **font)
plt.rc('legend', **{'fontsize': 20})

fig, ax = plt.subplots(1, 1, figsize=(19, 10))
fig.text(0.51, 0.035, r'$Generation$', ha='center', fontsize=20)
# fig.text(0.07, 0.5, r'$Avg. Food Consumed$', va='center', rotation='vertical', fontsize=20)
fig.text(0.07, 0.5, r'$Food Consumed$', va='center', rotation='vertical', fontsize=20)
title = 'Food consumed per organism'
fig.suptitle(title)


for i, FOOD in enumerate(FOODS):

    # for i in range(0, numAgents):
    #     ax.scatter(iter_list, FOOD[:, i], color=[0, 0, 0], alpha=0.2, s=30)
    c = cmap(norm(new_order[i]))
    # c = norm[i]
    # c = norm[IC[i]]

    muF = np.mean(FOOD, axis=1)
    ax.plot(iter_list, muF, color=c, label=labels[new_order[i]])

    # for numOrg in range(FOOD.shape[1]):
    #     ax.scatter(iter_list, FOOD[:, numOrg],
    #                alpha=0.01, s=8, color=c,  label=labels[new_order[i]])

    # maxF = np.max(FOOD, axis=1)
    # minF = np.min(FOOD, axis=1)
    # ax.fill_between(iter_list, maxF, minF,
    #                 color=np.divide(c, 2), alpha=a)

    sigmaF = FOOD.std(axis=1)
    ax.fill_between(iter_list, muF + sigmaF, muF - sigmaF,
                    color=c, alpha=a
                    )

custom_legend = [Line2D([0], [0], marker='o', color='w',
                        markerfacecolor=cmap(norm(1)), markersize=15),
                 Line2D([0], [0], marker='o', color='w',
                        markerfacecolor=cmap(norm(0)), markersize=15),
                 Line2D([0], [0], marker='o', color='w',
                        markerfacecolor=cmap(norm(2)), markersize=15),]

# custom_legend = [Circle((0, 0), 0.001,
#                         facecolor=cmap(norm(1))),
#                  Circle((0, 0), 1,
#                         facecolor=cmap(norm(0))),
#                  Circle((0, 0), 1,
#                         facecolor=cmap(norm(2)))]

ax.legend(custom_legend, [r'$\beta = 10$', r'$\beta = 1$', r'$\beta = 0.1$'], loc='upper left')

# plt.legend(loc=2)

# yticks = np.arange(0, 150, 20)
# ax.set_yticks(yticks)


    # xticks = [0.1, 0.5, 1, 2, 4, 10, 50, 100, 200, 500, 1000, 2000]
    # ax.set_xscale("log", nonposx='clip')
    # ax.set_xticks(xticks)
    # ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())


    # savefolder = folder + '/figs/fitness/'
    # savefilename = savefolder + 'fitness_gen_' + str(iter_list[0]) + '-' + str(iter_list[-1]) + '.png'
    # if not path.exists(savefolder):
    #     makedirs(savefolder)
    #
    # if saveFigBool:
    #     plt.savefig(savefilename, bbox_inches='tight', dpi=150)
    #     # plt.close()
    #
    #     savemsg = 'Saving ' + savefilename
    #     print(savemsg)

plt.show()
