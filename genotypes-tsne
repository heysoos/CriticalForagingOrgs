#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import offsetbox
import pickle
from sklearn import manifold


loadfile = 'evolve_only_1'
iter = '1002'
perplexity = 50
n_iter = 1000

def upper_tri_masking(A):
    m = A.shape[0]
    r = np.arange(m)
    mask = r[:,None] < r
    return A[mask]

folder = 'save/' + loadfile

filename = 'save/' + loadfile + '/isings/gen[' + iter + ']-isings.pickle'

startstr = 'Loading simulation:' + filename
print(startstr)

isings = pickle.load(open(filename, 'rb'))

J = np.zeros((50,351))
for orgNum, I in enumerate(isings):
    J[orgNum, :] = upper_tri_masking(I.J)
    # if orgNum == 0:
    #     J = upper_tri_masking(I.J)
    # else:
    #     np.concatenate((J, upper_tri_masking(I.J)))

#----------------------------------------------------------------------
# t-SNE embedding of the digits dataset
print("Computing t-SNE embedding")
tsne = manifold.TSNE(n_components=2, init='pca', random_state=0, perplexity=perplexity, n_iter=n_iter)
J_tsne = tsne.fit_transform(np.transpose(J))
b = 0.5
plt.scatter(J_tsne[:,0], J_tsne[:,1])

plt.show()
print()
