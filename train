#!/usr/bin/env python

from embodied_ising import ising
from embodied_ising import food
from embodied_ising import CriticalLearning, EvolutionLearning
import numpy as np
import matplotlib.pyplot as plt
from sys import argv

import pickle

# --- CONSTANTS ----------------------------------------------------------------+
settings = {}

# ENVIRONMENT SETTINGS
settings['pop_size'] = 150  # number of organisms
settings['numKill'] = int(settings['pop_size'] / 1.66)
settings['food_num'] = 100  # number of food particles
settings['food_radius'] = 0.03
settings['org_radius'] = 0.05
settings['ANN'] = True  # Use ANN or Ising?
settings['BoidOn'] = True  # Only use Boid model?

# SIMULATION SETTINGS
settings['TimeSteps'] = 2000  # number of timesteps per iteration

# number of system-wide spin updates per unit of time  (multiplies computation time)
settings['thermalTime'] = 3

settings['evolution_toggle'] = False  # only toggles for CriticalLearning
settings['evolution_rate'] = 1  # number of iterations to skip to kill/mate (gives more time to eat before evolution)

settings['dt'] = 0.2  # kinetic time step      (dt)
settings['r_max'] = 720
settings['dr_max'] = 90  # max rotational speed      (degrees per second)
settings['v_max'] = 0.5  # max velocity              (units per second)
settings['dv_max'] = 0.05  # max acceleration (+/-)    (units per second^2)

settings['x_min'] = 0.0  # arena eastern border
settings['x_max'] = 8.0  # arena western border
settings['y_min'] = 0.0  # arena southern border
settings['y_max'] = 8.0  # arena northern border

settings['save_data'] = True
settings['plot'] = True # make plots?
settings['TimeStepsGrowth'] = 0  # increases TimeSteps for N iterations, if 'plot' = False, turn 'True' after some
# iterations. Also begins saving figures after this many iterations if 'plot' setting is 'False'
settings['plotLive'] = True  # live updates of figures
settings['frameRate'] = 1

settings['size'] = 10
settings['nSensors'] = 3
settings['nMotors'] = 4
settings['learningrate'] = 0.01  # 0.01
# how many hidden neurons are not connected to each other
settings['numDisconnectedNeurons'] = 0 #  int((settings['size'] - settings['nSensors'] - settings['nMotors']) / 1.2)
# how should organisms repopulate, duplicate or mate?
settings['mateDupRatio'] = 0.5
settings['mutationRateDup'] = 0.1  # DUPLICATION mutation rate

settings['mutateB'] = False  # toggle to allow Beta (temperature) mutations (toggle off if critical learning is on)
settings['sigB'] = 0.02  # std for Beta mutation

settings['LoadIsings'] = False
# settings['loadfile'] = 'sim-20180524-100859-evo'
settings['loadfile'] = 'sim-20190226-153725'
settings['iter'] = '482'

Iterations = 1


# --- MAIN ---------------------------------------------------------------------+

def run(settings):
    size = settings['size']
    nSensors = settings['nSensors']
    nMotors = settings['nMotors']
    # LOAD ISING CORRELATIONS
    # filename = 'correlations-ising2D-size400.npy'
    filename2 = 'correlations-ising-generalized-size83.npy'
    settings['Cdist'] = np.load(filename2)

    # --- POPULATE THE ENVIRONMENT WITH FOOD ---------------+
    foods = []
    for i in range(0, settings['food_num']):
        foods.append(food(settings))

    # --- POPULATE THE ENVIRONMENT WITH ORGANISMS ----------+
    if settings['LoadIsings']:
        loadfile = 'save/' + settings['loadfile'] + '/isings/gen[' + settings['iter'] + ']-isings.pickle'
        startstr = 'Loading simulation:' + loadfile + ' (' + str(settings['TimeSteps']) + \
                   ' timesteps) x (' + str(Iterations) + ' iterations)'
        print(startstr)
        isings = pickle.load(open(loadfile, 'rb'))
    else:
        startstr = 'Starting simulation: (' + str(settings['TimeSteps']) + \
                   ' timesteps) x (' + str(Iterations) + ' iterations)'
        print(startstr)
        isings = []
        for i in range(0, settings['pop_size']):
            isings.append(ising(settings, size, nSensors, nMotors, name='gen[0]-org[' + str(i) + ']'))

    # --- CYCLE THROUGH EACH GENERATION --------------------+
    # Choose between CriticalLearning (which has both inverse-ising and GA with toggle)
    # or EvolutionLearning which is only GA. The functions are fairly similar, should find a
    # better way to call them than this.
    # ------------------------------------------------------+

    # CriticalLearning(isings, foods, settings, Iterations)

    EvolutionLearning(isings, foods, settings, Iterations)

    pass


# --- RUN ----------------------------------------------------------------------+

run(settings)

# --- END ----------------------------------------------------------------------+
